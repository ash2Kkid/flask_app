name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t my-flask-app .

  agent-zero-decision:
    needs: docker-build
    runs-on: ubuntu-latest

    outputs:
      deploy: ${{ steps.agent.outputs.deploy }}
      strategy: ${{ steps.agent.outputs.strategy }}

    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Call Agent-Zero for deployment decision
        id: agent
        run: |
          echo "📡 Calling Agent-Zero at $AGENT_ZERO_URL"

          http_code=$(curl -s -w "%{http_code}" -o response.json -X POST "$AGENT_ZERO_URL" \
            -H "Content-Type: application/json" \
            -d '{"test_status": "passed"}')

          echo "🌐 HTTP Status: $http_code"
          cat response.json || echo "⚠️ No response body"

          if [ "$http_code" -ne 200 ]; then
            echo "❌ Agent-Zero call failed with HTTP $http_code"
            exit 1
          fi

          if ! jq . response.json > /dev/null 2>&1; then
            echo "❌ Invalid JSON in Agent-Zero response"
            cat response.json
            exit 3
          fi

          deploy=$(jq -r '.deploy // "false"' response.json)
          strategy=$(jq -r '.strategy // "none"' response.json)

          echo "✅ Parsed: deploy=$deploy, strategy=$strategy"
          echo "deploy=$deploy" >> $GITHUB_OUTPUT
          echo "strategy=$strategy" >> $GITHUB_OUTPUT
        env:
          AGENT_ZERO_URL: ${{ secrets.AGENT_ZERO_URL }}

  deploy:
    needs: agent-zero-decision
    if: needs.agent-zero-decision.outputs.deploy == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy using Agent-Zero strategy
        run: |
          echo "🚀 Deployment approved!"
          echo "Strategy: ${{ needs.agent-zero-decision.outputs.strategy }}"
          # Insert actual deployment commands here (e.g., docker push, ssh, kubectl)
